<?xml version="1.0" encoding="UTF-8"?>
<con:interface xmlns:con="http://eviware.com/soapui/config" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RestService" id="c72e111e-0672-423e-9909-41c093e15267" name="eCheck API" type="rest_ex" wadlVersion="https://swagger.io/swagger2/specification" definitionUrl="https://api.swaggerhub.com/apis/luizjosue/e-check_api/1.0.0" basePath="/eCheck">
  <con:description id="9ba4988f-ddc4-4a8d-8303-8b302a18af06">ECHECK - MOBILE APP AND ADMIN PORTAL SWAGGER API</con:description>
  <con:settings id="620086a3-1b06-45cb-b97b-0ef65ea5fc77">
    <con:setting id="c72e111e-0672-423e-9909-41c093e15267fileName">eCheck-API</con:setting>
  </con:settings>
  <con:definitionCache type="TEXT" rootPart="https://api.swaggerhub.com/apis/luizjosue/e-check_api/1.0.0">
    <con:part>
      <con:url>https://api.swaggerhub.com/apis/luizjosue/e-check_api/1.0.0</con:url>
      <con:content>{"swagger":"2.0","info":{"version":"1.0.0","title":"eCheck API","description":"ECHECK - MOBILE APP AND ADMIN PORTAL SWAGGER API"},"host":"localhost:8080","basePath":"/eCheck","schemes":["https"],"paths":{"/auth/register":{"x-swagger-router-controller":"AuthController","post":{"operationId":"register","summary":"Register user","description":"Create a new user with AuthRequest.username, AuthRequest.password and ROLE_OPERATOR","produces":["application/json"],"consumes":["application/json"],"parameters":[{"in":"body","name":"authRequest","description":"register request","required":true,"schema":{"$ref":"#/definitions/AuthRequest"}}],"responses":{"200":{"description":"successful operation"},"400":{"description":"the validation failed, client request is invalid","schema":{"$ref":"#/definitions/ErrorDetail"}},"409":{"description":"username is already taken and thus conflicts","schema":{"$ref":"#/definitions/ErrorDetail"}}}}},"/auth/login":{"x-swagger-router-controller":"AuthController","post":{"operationId":"login","summary":"User login","description":"Find user by AuthRequest.username and check AuthRequest.password. Upon success login, use user id as the JWT token payload to generate access token (with configurable expire time) and refresh token (never expire).","produces":["application/json"],"consumes":["application/json"],"parameters":[{"in":"body","name":"authRequest","description":"login request","required":true,"schema":{"$ref":"#/definitions/AuthRequest"}}],"responses":{"200":{"description":"logged in user along with access token and refresh token","schema":{"$ref":"#/definitions/LoginResponse"}},"400":{"description":"the validation failed, client request is invalid","schema":{"$ref":"#/definitions/ErrorDetail"}},"401":{"description":"if username is not found or if password does not match","schema":{"$ref":"#/definitions/ErrorDetail"}}}}},"/auth/refreshToken":{"x-swagger-router-controller":"AuthController","post":{"operationId":"refreshToken","summary":"Issue a new access token","description":"Extract refresh token from X-REFRESH-TOKEN header, validate it and issue a new access token","security":[{"refreshToken":[]}],"produces":["application/json"],"consumes":["application/json"],"responses":{"200":{"description":"logged in user along with access token and refresh token","schema":{"$ref":"#/definitions/LoginResponse"}},"401":{"description":"refresh token is missing or invalid","schema":{"$ref":"#/definitions/ErrorDetail"}}}}},"/configurations/list":{"x-swagger-router-controller":"AdminController","get":{"operationId":"searchConfigurations","summary":"Search list of eCheck configurations (only non-deleted data) by given criteria, page number, page size, sort column and sort order","description":"1. The implementations must support criteria search by eCheck_SKU.sku_num column, pagination and sort by Process.description, eCheck_SKU.sku_num, eCheck_SKU.description\n2. Iterate the result list of Configuration records, if a Configuration record has same processDescription, skuNum and skuDescription as its previous record, then set its processDescription, skuNum and skuDescription to null\n","security":[{"userToken":[]}],"produces":["application/json"],"consumes":["application/json"],"parameters":[{"in":"query","name":"criteria","description":"the criteria to search (wildcard match). If null then no criteria filter applied","required":false,"type":"string"},{"in":"query","name":"pageNumber","description":"the page 0 based indexing. Must be >=0 if present. Assume 0 by default if null","required":false,"type":"integer","format":"int32"},{"in":"query","name":"pageSize","description":"the maximum number of results to return. Must be >0 if present. Assume Integer.MAX by default if null","required":false,"type":"integer","format":"int32"},{"in":"query","name":"sortColumn","description":"the sort by column, if implementations doesn't support sorting by the provided column, implementations must return 400 with proper error message and error code","required":false,"type":"string"},{"in":"query","name":"sortOrder","description":"the sort order. Must be ASC or DESC if present. Assume ASC by default if null","required":false,"type":"string","enum":["ASC","DESC"]}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/ConfigurationSearchResult"}},"400":{"description":"the validation failed, client request is invalid","schema":{"$ref":"#/definitions/ErrorDetail"}},"401":{"description":"access token is not valid","schema":{"$ref":"#/definitions/ErrorDetail"}},"403":{"description":"user does not have admin role","schema":{"$ref":"#/definitions/ErrorDetail"}}}}},"/processes/list":{"x-swagger-router-controller":"AdminController","get":{"operationId":"searchProcesses","summary":"Search list of processes by given criteria, page number, page size, sort column and sort order","description":"The implementations must support criteria search by Process.description column, pagination and sort by Process.description.","security":[{"userToken":[]}],"produces":["application/json"],"consumes":["application/json"],"parameters":[{"in":"query","name":"criteria","description":"the criteria to search (wildcard match). If null then no criteria filter applied","required":false,"type":"string"},{"in":"query","name":"pageNumber","description":"the page 0 based indexing. Must be >=0 if present. Assume 0 by default if null","required":false,"type":"integer","format":"int32"},{"in":"query","name":"pageSize","description":"the maximum number of results to return. Must be >0 if present. Assume Integer.MAX by default if null","required":false,"type":"integer","format":"int32"},{"in":"query","name":"sortColumn","description":"the sort by column, if implementations doesn't support sorting by the provided column, implementations must return 400 with proper error message and error code","required":false,"type":"string"},{"in":"query","name":"sortOrder","description":"the sort order. Must be ASC or DESC if present. Assume ASC by default if null","required":false,"type":"string","enum":["ASC","DESC"]}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/ProcessSearchResult"}},"400":{"description":"the validation failed, client request is invalid","schema":{"$ref":"#/definitions/ErrorDetail"}},"401":{"description":"access token is not valid","schema":{"$ref":"#/definitions/ErrorDetail"}},"403":{"description":"user does not have admin role","schema":{"$ref":"#/definitions/ErrorDetail"}}}}},"/processes":{"x-swagger-router-controller":"AdminController","post":{"operationId":"addProcess","summary":"Create a new process","description":"1. Get duplicating row (select * from Process where description={process.description})\n2. If there is a duplicating row, return 409 error\n3. Else insert into Process, then return 200 suceess response\n","security":[{"userToken":[]}],"produces":["application/json"],"consumes":["application/json"],"parameters":[{"in":"body","name":"process","description":"the process to create","required":true,"schema":{"$ref":"#/definitions/Process"}}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/Process"}},"400":{"description":"the validation failed, client request is invalid","schema":{"$ref":"#/definitions/ErrorDetail"}},"401":{"description":"access token is not valid","schema":{"$ref":"#/definitions/ErrorDetail"}},"403":{"description":"user does not have admin role","schema":{"$ref":"#/definitions/ErrorDetail"}},"409":{"description":"process description is already taken and thus conflicts","schema":{"$ref":"#/definitions/ErrorDetail"}}}}},"/processes/{id}":{"x-swagger-router-controller":"AdminController","put":{"operationId":"updateProcess","summary":"Update process","description":"1. Check process.id exists in Process, return 404 error if check failed\n2. Get duplicating row (select * from Process where id!={process.id} and description={process.description})\n3. If there is a duplicating row, return 409 error\n4. update Process set... where id={process.id}, return 200 success response\n","security":[{"userToken":[]}],"produces":["application/json"],"consumes":["application/json"],"parameters":[{"in":"path","name":"id","description":"the process id","required":true,"type":"number","format":"long"},{"in":"body","name":"process","description":"the process to update","required":true,"schema":{"$ref":"#/definitions/Process"}}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/Process"}},"400":{"description":"the validation failed, client request is invalid","schema":{"$ref":"#/definitions/ErrorDetail"}},"401":{"description":"access token is not valid","schema":{"$ref":"#/definitions/ErrorDetail"}},"403":{"description":"user does not have admin role","schema":{"$ref":"#/definitions/ErrorDetail"}},"404":{"description":"the process does not exist","schema":{"$ref":"#/definitions/ErrorDetail"}},"409":{"description":"process description is already taken and thus conflicts","schema":{"$ref":"#/definitions/ErrorDetail"}}}}},"/skus/list":{"x-swagger-router-controller":"AdminController","get":{"operationId":"searchSKUs","summary":"Search list of SKUs by given criteria, page number, page size, sort column and sort order","description":"The implementations must support criteria search by eCheck_SKU.sku_num column, pagination and sort by Process.description, eCheck_SKU.sku_num, eCheck_SKU.description.","security":[{"userToken":[]}],"produces":["application/json"],"consumes":["application/json"],"parameters":[{"in":"query","name":"criteria","description":"the criteria to search (wildcard match). If null then no criteria filter applied","required":false,"type":"string"},{"in":"query","name":"pageNumber","description":"the page 0 based indexing. Must be >=0 if present. Assume 0 by default if null","required":false,"type":"integer","format":"int32"},{"in":"query","name":"pageSize","description":"the maximum number of results to return. Must be >0 if present. Assume Integer.MAX by default if null","required":false,"type":"integer","format":"int32"},{"in":"query","name":"sortColumn","description":"the sort by column, if implementations doesn't support sorting by the provided column, implementations must return 400 with proper error message and error code","required":false,"type":"string"},{"in":"query","name":"sortOrder","description":"the sort order. Must be ASC or DESC if present. Assume ASC by default if null","required":false,"type":"string","enum":["ASC","DESC"]}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/SKUSearchResult"}},"400":{"description":"the validation failed, client request is invalid","schema":{"$ref":"#/definitions/ErrorDetail"}},"401":{"description":"access token is not valid","schema":{"$ref":"#/definitions/ErrorDetail"}},"403":{"description":"user does not have admin role","schema":{"$ref":"#/definitions/ErrorDetail"}}}}},"/skus":{"x-swagger-router-controller":"AdminController","post":{"operationId":"addSKU","summary":"Create a new SKU","description":"1. Check sku.process.id exists in Process, return 404 error if check failed\n2. Get duplicating row (select * from eCheck_SKU where skuNum={sku.skuNum} and process_id={sku.process.id})\n3. If there is a duplicating row, return 409 error\n4. Else insert into eCheck_SKU, then return 200 suceess response\n","security":[{"userToken":[]}],"produces":["application/json"],"consumes":["application/json"],"parameters":[{"in":"body","name":"sku","description":"the SKU to create","required":true,"schema":{"$ref":"#/definitions/SKU"}}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/SKU"}},"400":{"description":"the validation failed, client request is invalid","schema":{"$ref":"#/definitions/ErrorDetail"}},"401":{"description":"access token is not valid","schema":{"$ref":"#/definitions/ErrorDetail"}},"403":{"description":"user does not have admin role","schema":{"$ref":"#/definitions/ErrorDetail"}},"404":{"description":"the sku.process.id does not exist","schema":{"$ref":"#/definitions/ErrorDetail"}},"409":{"description":"SKU (combination of sku.skuNum and sku.process.id) is already taken and thus conflicts","schema":{"$ref":"#/definitions/ErrorDetail"}}}}},"/skus/{id}":{"x-swagger-router-controller":"AdminController","put":{"operationId":"updateSKU","summary":"Update SKU","description":"1. Check sku.process.id exists in Process, return 404 error if check failed\n2. Check sku.id exists in eCheck_SKU, return 404 error if check failed\n3. Get duplicating row (select * from eCheck_SKU where id!={sku.id} and skuNum={sku.skuNum} and process_id={sku.process.id})\n4. If there is a duplicating row, return 409 error\n5. update eCheck_SKU set... where id={sku.id}, return 200 success response\n","security":[{"userToken":[]}],"produces":["application/json"],"consumes":["application/json"],"parameters":[{"in":"path","name":"id","description":"the SKU id","required":true,"type":"number","format":"long"},{"in":"body","name":"sku","description":"the SKU to update","required":true,"schema":{"$ref":"#/definitions/SKU"}}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/SKU"}},"400":{"description":"the validation failed, client request is invalid","schema":{"$ref":"#/definitions/ErrorDetail"}},"401":{"description":"access token is not valid","schema":{"$ref":"#/definitions/ErrorDetail"}},"403":{"description":"user does not have admin role","schema":{"$ref":"#/definitions/ErrorDetail"}},"404":{"description":"the sku.process.id or sku.id does not exist","schema":{"$ref":"#/definitions/ErrorDetail"}},"409":{"description":"SKU (combination of sku.skuNum and sku.process.id) is already taken and thus conflicts","schema":{"$ref":"#/definitions/ErrorDetail"}}}}},"/skus/{skuId}/requiredEquipments":{"x-swagger-router-controller":"AdminController","get":{"operationId":"getRequiredEquipments","summary":"Get required equipments of SKU","description":"select * from SKU_Required_Equipment where echeck_sku_id={skuId}","security":[{"userToken":[]}],"produces":["application/json"],"parameters":[{"in":"path","name":"skuId","description":"the SKU id","required":true,"type":"number","format":"long"}],"responses":{"200":{"description":"successful operation","schema":{"type":"array","items":{"$ref":"#/definitions/RequiredEquipment"}}},"400":{"description":"the validation failed, client request is invalid","schema":{"$ref":"#/definitions/ErrorDetail"}},"401":{"description":"access token is not valid","schema":{"$ref":"#/definitions/ErrorDetail"}},"403":{"description":"user does not have admin role","schema":{"$ref":"#/definitions/ErrorDetail"}},"404":{"description":"the SKU id does not exist","schema":{"$ref":"#/definitions/ErrorDetail"}}}}},"/requiredEquipments":{"x-swagger-router-controller":"AdminController","post":{"operationId":"addRequiredEquipment","summary":"Create a new required equipment","description":"1. Check requiredEquipment.sku.id exists in eCheck_SKU, return 404 error if check failed\n2. Check requiredEquipment.equipmentType.id exists in Equipment_Type, return 404 error if check failed\n3. Get duplicating row (select * from SKU_Required_Equipment where echeck_sku_id={requiredEquipment.sku.id} and equipment_type_id={requiredEquipment.equipmentType.id})\n4. If there is a duplicating row, return 409 error\n5. Else insert into SKU_Required_Equipment, then return 200 suceess response\n","security":[{"userToken":[]}],"produces":["application/json"],"consumes":["application/json"],"parameters":[{"in":"body","name":"requiredEquipment","description":"the required equipment to create","required":true,"schema":{"$ref":"#/definitions/RequiredEquipment"}}],"responses":{"200":{"description":"successful operation"},"400":{"description":"the validation failed, client request is invalid","schema":{"$ref":"#/definitions/ErrorDetail"}},"401":{"description":"access token is not valid","schema":{"$ref":"#/definitions/ErrorDetail"}},"403":{"description":"user does not have admin role","schema":{"$ref":"#/definitions/ErrorDetail"}},"404":{"description":"the requiredEquipment.sku.id or requiredEquipment.equipmentType.id does not exist","schema":{"$ref":"#/definitions/ErrorDetail"}},"409":{"description":"required equipment (combination of requiredEquipment.sku.id and requiredEquipment.equipmentType.id) is already taken and thus conflicts","schema":{"$ref":"#/definitions/ErrorDetail"}}}}},"/requiredEquipments/{id}":{"x-swagger-router-controller":"AdminController","put":{"operationId":"updateRequiredEquipment","summary":"Update required equipment","description":"1. Check requiredEquipment.sku.id exists in eCheck_SKU, return 404 error if check failed\n2. Check requiredEquipment.equipmentType.id exists in Equipment_Type, return 404 error if check failed\n3. Check requiredEquipment.id exists in SKU_Required_Equipment, return 404 error if check failed\n4. Get duplicating row (select * from SKU_Required_Equipment where id!={requiredEquipment.id} and echeck_sku_id={requiredEquipment.sku.id} and equipment_type_id={requiredEquipment.equipmentType.id})\n5. If there is a duplicating row, return 409 error\n6. update SKU_Required_Equipment set... where id={requiredEquipment.id}, return 200 success response\n","security":[{"userToken":[]}],"produces":["application/json"],"consumes":["application/json"],"parameters":[{"in":"path","name":"id","description":"the required equipment id","required":true,"type":"number","format":"long"},{"in":"body","name":"requiredEquipment","description":"the required equipment to update","required":true,"schema":{"$ref":"#/definitions/RequiredEquipment"}}],"responses":{"200":{"description":"successful operation"},"400":{"description":"the validation failed, client request is invalid","schema":{"$ref":"#/definitions/ErrorDetail"}},"401":{"description":"access token is not valid","schema":{"$ref":"#/definitions/ErrorDetail"}},"403":{"description":"user does not have admin role","schema":{"$ref":"#/definitions/ErrorDetail"}},"404":{"description":"the requiredEquipment.sku.id, requiredEquipment.equipmentType.id or requiredEquipment.id does not exist","schema":{"$ref":"#/definitions/ErrorDetail"}},"409":{"description":"required equipment (combination of requiredEquipment.sku.id and requiredEquipment.equipmentType.id) is already taken and thus conflicts","schema":{"$ref":"#/definitions/ErrorDetail"}}}}},"/equipmentTypes/list":{"x-swagger-router-controller":"AdminController","get":{"operationId":"searchEquipmentTypes","summary":"Search list of equipment types by given criteria, page number, page size, sort column and sort order","description":"The implementations must support criteria search by Equipment_Type.description column, pagination and sort by Equipment_Type.description.","security":[{"userToken":[]}],"produces":["application/json"],"consumes":["application/json"],"parameters":[{"in":"query","name":"criteria","description":"the criteria to search (wildcard match). If null then no criteria filter applied","required":false,"type":"string"},{"in":"query","name":"pageNumber","description":"the page 0 based indexing. Must be >=0 if present. Assume 0 by default if null","required":false,"type":"integer","format":"int32"},{"in":"query","name":"pageSize","description":"the maximum number of results to return. Must be >0 if present. Assume Integer.MAX by default if null","required":false,"type":"integer","format":"int32"},{"in":"query","name":"sortColumn","description":"the sort by column, if implementations doesn't support sorting by the provided column, implementations must return 400 with proper error message and error code","required":false,"type":"string"},{"in":"query","name":"sortOrder","description":"the sort order. Must be ASC or DESC if present. Assume ASC by default if null","required":false,"type":"string","enum":["ASC","DESC"]}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/EquipmentTypeSearchResult"}},"400":{"description":"the validation failed, client request is invalid","schema":{"$ref":"#/definitions/ErrorDetail"}},"401":{"description":"access token is not valid","schema":{"$ref":"#/definitions/ErrorDetail"}},"403":{"description":"user does not have admin role","schema":{"$ref":"#/definitions/ErrorDetail"}}}}},"/equipmentTypes":{"x-swagger-router-controller":"AdminController","post":{"operationId":"addEquipmentTypes","summary":"Create a new equipment type","description":"1. Get duplicating row (select * from Equipment_Type where description={equipmentType.description})\n2. If there is a duplicating row, return 409 error\n3. Else insert into Equipment_Type, then return 200 suceess response\n","security":[{"userToken":[]}],"produces":["application/json"],"consumes":["application/json"],"parameters":[{"in":"body","name":"equipmentType","description":"the equipment type to create","required":true,"schema":{"$ref":"#/definitions/EquipmentType"}}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/EquipmentType"}},"400":{"description":"the validation failed, client request is invalid","schema":{"$ref":"#/definitions/ErrorDetail"}},"401":{"description":"access token is not valid","schema":{"$ref":"#/definitions/ErrorDetail"}},"403":{"description":"user does not have admin role","schema":{"$ref":"#/definitions/ErrorDetail"}},"409":{"description":"equipment type description is already taken and thus conflicts","schema":{"$ref":"#/definitions/ErrorDetail"}}}}},"/equipmentTypes/{id}":{"x-swagger-router-controller":"AdminController","put":{"operationId":"updateEquipmentType","summary":"Update equipment type","description":"1. Check equipmentType.id exists in Equipment_Type, return 404 error if check failed\n2. Get duplicating row (select * from Equipment_Type where id!={equipmentType.id} and description={equipmentType.description})\n3. If there is a duplicating row, return 409 error\n4. update Equipment_Type set... where id={equipmentType.id}, return 200 success response\n","security":[{"userToken":[]}],"produces":["application/json"],"consumes":["application/json"],"parameters":[{"in":"path","name":"id","description":"the equipment type id","required":true,"type":"number","format":"long"},{"in":"body","name":"equipmentType","description":"the equipment type to update","required":true,"schema":{"$ref":"#/definitions/EquipmentType"}}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/EquipmentType"}},"400":{"description":"the validation failed, client request is invalid","schema":{"$ref":"#/definitions/ErrorDetail"}},"401":{"description":"access token is not valid","schema":{"$ref":"#/definitions/ErrorDetail"}},"403":{"description":"user does not have admin role","schema":{"$ref":"#/definitions/ErrorDetail"}},"404":{"description":"the equipment type does not exist","schema":{"$ref":"#/definitions/ErrorDetail"}},"409":{"description":"equipment type description is already taken and thus conflicts","schema":{"$ref":"#/definitions/ErrorDetail"}}}}},"/allowedEquipments/list":{"x-swagger-router-controller":"AdminController","get":{"operationId":"searchAllowedEquipments","summary":"Search list of allowed equipments (only non-deleted data) by given criteria, page number, page size, sort column and sort order","description":"The implementations must support criteria search by eCheck_SKU.sku_num or Allowed_Equipment.bar_code column, pagination and sort by eCheck_SKU.sku_num, Equipment_Type.description and Allowed_Equipment.bar_code.","security":[{"userToken":[]}],"produces":["application/json"],"consumes":["application/json"],"parameters":[{"in":"query","name":"criteria","description":"the criteria to search (wildcard match). If null then no criteria filter applied","required":false,"type":"string"},{"in":"query","name":"pageNumber","description":"the page 0 based indexing. Must be >=0 if present. Assume 0 by default if null","required":false,"type":"integer","format":"int32"},{"in":"query","name":"pageSize","description":"the maximum number of results to return. Must be >0 if present. Assume Integer.MAX by default if null","required":false,"type":"integer","format":"int32"},{"in":"query","name":"sortColumn","description":"the sort by column, if implementations doesn't support sorting by the provided column, implementations must return 400 with proper error message and error code","required":false,"type":"string"},{"in":"query","name":"sortOrder","description":"the sort order. Must be ASC or DESC if present. Assume ASC by default if null","required":false,"type":"string","enum":["ASC","DESC"]}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/AllowedEquipmentSearchResult"}},"400":{"description":"the validation failed, client request is invalid","schema":{"$ref":"#/definitions/ErrorDetail"}},"401":{"description":"access token is not valid","schema":{"$ref":"#/definitions/ErrorDetail"}},"403":{"description":"user does not have admin role","schema":{"$ref":"#/definitions/ErrorDetail"}}}}},"/allowedEquipments":{"x-swagger-router-controller":"AdminController","post":{"operationId":"addAllowedEquipment","summary":"Create a new allowed equipment","description":"1. Check allowedEquipment.sku.id exists in eCheck_SKU, return 404 error if check failed\n2. Check allowedEquipment.equipmentType.id exists in Equipment_Type, return 404 error if check failed\n3. Get duplicating row (select * from Allowed_Equipment where echeck_sku_id={allowedEquipment.sku.id} and equipment_type_id={allowedEquipment.equipmentType.id} and bar_code={allowedEquipment.barCode})\n4. If there is a duplicating row which is not marked as deleted, return 409 error\n5. Else if there is a duplicating row which is marked as deleted, update it to set deleted=0, then return 200 suceess response\n6. Else if there is not a duplicating row, insert into Allowed_Equipment, then return 200 suceess response\n","security":[{"userToken":[]}],"produces":["application/json"],"consumes":["application/json"],"parameters":[{"in":"body","name":"allowedEquipment","description":"the allowed equipment to create","required":true,"schema":{"$ref":"#/definitions/AllowedEquipment"}}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/AllowedEquipment"}},"400":{"description":"the validation failed, client request is invalid","schema":{"$ref":"#/definitions/ErrorDetail"}},"401":{"description":"access token is not valid","schema":{"$ref":"#/definitions/ErrorDetail"}},"403":{"description":"user does not have admin role","schema":{"$ref":"#/definitions/ErrorDetail"}},"404":{"description":"the allowedEquipment.sku.id or allowedEquipment.equipmentType.id does not exist","schema":{"$ref":"#/definitions/ErrorDetail"}},"409":{"description":"allowed equipment (combination of allowedEquipment.sku.id, allowedEquipment.equipmentType.id and allowedEquipment.barCode) is already taken and thus conflicts","schema":{"$ref":"#/definitions/ErrorDetail"}}}}},"/allowedEquipments/{id}":{"x-swagger-router-controller":"AdminController","put":{"operationId":"updateAllowedEquipment","summary":"Update allowed equipment","description":"1. Check allowedEquipment.sku.id exists in eCheck_SKU, return 404 error if check failed\n2. Check allowedEquipment.equipmentType.id exists in Equipment_Type, return 404 error if check failed\n3. Check allowedEquipment.id exists in Allowed_Equipment and is not marked as deleted, return 404 error if check failed\n4. Get duplicating row (select * from Allowed_Equipment where id!={allowedEquipment.id} and echeck_sku_id={allowedEquipment.sku.id} and equipment_type_id={allowedEquipment.equipmentType.id} and bar_code={allowedEquipment.barCode})\n5. If there is a duplicating row and it is not marked as deleted, return 409 error\n6. update Allowed_Equipment set... where id={allowedEquipment.id}, return 200 success response\n","security":[{"userToken":[]}],"produces":["application/json"],"consumes":["application/json"],"parameters":[{"in":"path","name":"id","description":"the allowed equipment id","required":true,"type":"number","format":"long"},{"in":"body","name":"allowedEquipment","description":"the allowed equipment to update","required":true,"schema":{"$ref":"#/definitions/AllowedEquipment"}}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/AllowedEquipment"}},"400":{"description":"the validation failed, client request is invalid","schema":{"$ref":"#/definitions/ErrorDetail"}},"401":{"description":"access token is not valid","schema":{"$ref":"#/definitions/ErrorDetail"}},"403":{"description":"user does not have admin role","schema":{"$ref":"#/definitions/ErrorDetail"}},"404":{"description":"the allowedEquipment.sku.id or allowedEquipment.equipmentType.id does not exist; Or allowedEquipment.id does not exist or marked as deleted","schema":{"$ref":"#/definitions/ErrorDetail"}},"409":{"description":"allowed equipment (combination of allowedEquipment.sku.id, allowedEquipment.equipmentType.id and allowedEquipment.barCode) is already taken and thus conflicts","schema":{"$ref":"#/definitions/ErrorDetail"}}}},"delete":{"operationId":"deleteAllowedEquipment","summary":"Delete allowed equipment. The allowed equipment is soft deleted, which is marked as deleted but not actually removed from database","description":"1. Check id exists in Allowed_Equipment and is not marked as deleted, return 404 error if check failed\n2. update Allowed_Equipment set deleted=1 where id={id}\n","security":[{"userToken":[]}],"produces":["application/json"],"parameters":[{"in":"path","name":"id","description":"the allowed equipment id","required":true,"type":"number","format":"long"}],"responses":{"200":{"description":"successful operation"},"401":{"description":"access token is not valid","schema":{"$ref":"#/definitions/ErrorDetail"}},"403":{"description":"user does not have admin role","schema":{"$ref":"#/definitions/ErrorDetail"}},"404":{"description":"the allowed equipment does not exist or marked as deleted","schema":{"$ref":"#/definitions/ErrorDetail"}}}}},"/audits/list":{"x-swagger-router-controller":"AdminController","get":{"operationId":"searchInspectionAudits","summary":"Search list of inspection audits (without entry details) by given criteria, page number, page size, sort column and sort order","description":"The implementations must support criteria search by eCheck_SKU.sku_num or eCheck_Audit.batch column, pagination and sort by eCheck_SKU.sku_num, eCheck_Audit.batch, eCheck_Audit.entry_datetime and eCheck_Audit.updated_by.","security":[{"userToken":[]}],"produces":["application/json"],"consumes":["application/json"],"parameters":[{"in":"query","name":"criteria","description":"the criteria to search (wildcard match). If null then no criteria filter applied","required":false,"type":"string"},{"in":"query","name":"pageNumber","description":"the page 0 based indexing. Must be >=0 if present. Assume 0 by default if null","required":false,"type":"integer","format":"int32"},{"in":"query","name":"pageSize","description":"the maximum number of results to return. Must be >0 if present. Assume Integer.MAX by default if null","required":false,"type":"integer","format":"int32"},{"in":"query","name":"sortColumn","description":"the sort by column, if implementations doesn't support sorting by the provided column, implementations must return 400 with proper error message and error code","required":false,"type":"string"},{"in":"query","name":"sortOrder","description":"the sort order. Must be ASC or DESC if present. Assume ASC by default if null","required":false,"type":"string","enum":["ASC","DESC"]}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/InspectionAuditSearchResult"}},"400":{"description":"the validation failed, client request is invalid","schema":{"$ref":"#/definitions/ErrorDetail"}},"401":{"description":"access token is not valid","schema":{"$ref":"#/definitions/ErrorDetail"}},"403":{"description":"user does not have admin role","schema":{"$ref":"#/definitions/ErrorDetail"}}}}},"/audits/{auditId}":{"x-swagger-router-controller":"AdminController","get":{"operationId":"getInspectionAudit","summary":"Get inspection audit along with its entry details","description":"select * from eCheck_SKU where id={auditId}","security":[{"userToken":[]}],"produces":["application/json"],"parameters":[{"in":"path","name":"auditId","description":"the audit id","required":true,"type":"number","format":"long"}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/InspectionAudit"}},"400":{"description":"the validation failed, client request is invalid","schema":{"$ref":"#/definitions/ErrorDetail"}},"401":{"description":"access token is not valid","schema":{"$ref":"#/definitions/ErrorDetail"}},"403":{"description":"user does not have admin role","schema":{"$ref":"#/definitions/ErrorDetail"}},"404":{"description":"the audit does not exist","schema":{"$ref":"#/definitions/ErrorDetail"}}}}},"/masterdata":{"x-swagger-router-controller":"MasterDataController","get":{"operationId":"loadMasterData","summary":"Get master data (include deleted data)","description":"Query all ProcessDTO/SkuDTO/EquipmentTypeDTO/RequiredEquipmentDTO/AllowedEquipmentDTO (include deleted data) from database and return","security":[{"userToken":[]}],"produces":["application/json"],"responses":{"200":{"description":"successful operation","schema":{"type":"array","items":{"$ref":"#/definitions/MasterData"}}},"401":{"description":"access token is not valid","schema":{"$ref":"#/definitions/ErrorDetail"}},"403":{"description":"user does not have admin or operator role","schema":{"$ref":"#/definitions/ErrorDetail"}}}}},"/masterdata/delta":{"x-swagger-router-controller":"MasterDataController","get":{"operationId":"loadMasterDataDelta","summary":"Get master data delta (include deleted data)","description":"For each given table, query the corresponding DTOs (include deleted data) which have createdAt or updatedAt timestamp greater than given last updated date","security":[{"userToken":[]}],"produces":["application/json"],"parameters":[{"in":"query","name":"tables","description":"the array of table names to get their delta data. Non-null and non-empty. Its length must be same as lastUpdatedDates parameter","required":true,"type":"array","items":{"type":"string"}},{"in":"query","name":"lastUpdatedDates","description":"the array of last updated dates to determine delta data for each table. Non-null and non-empty. Its length must be same as tables parameter","required":true,"type":"array","items":{"type":"string","format":"date-time"}}],"responses":{"200":{"description":"successful operation","schema":{"type":"array","items":{"$ref":"#/definitions/MasterData"}}},"400":{"description":"the validation failed, client request is invalid","schema":{"$ref":"#/definitions/ErrorDetail"}},"401":{"description":"access token is not valid","schema":{"$ref":"#/definitions/ErrorDetail"}},"403":{"description":"user does not have admin or operator role","schema":{"$ref":"#/definitions/ErrorDetail"}}}}},"/inspectionAuditEntry":{"x-swagger-router-controller":"AuditController","put":{"operationId":"saveInspectionAuditEntry","summary":"Save inspection audit. Note the given auditEntry.inspection.inspectionStatus must be either INPROGRESS or DELETED","description":"1. Get existing audit (select * from eCheck_Audit where echeck_sku_id=auditEntry.inspection.echeckSkuId and batch=auditEntry.inspection.batch)\n2. If existing audit is marked as deleted (ins_status=DELETED), return 404 error\n3. If existing audit is not deleted then update it (update eCheck_Audit set entry_datetime=auditEntry.entryDatetime, ins_status=auditEntry.inspection.inspectionStatus.description, audit_entry=auditEntry.toJSON())\n4. If there is no existing audit then insert it (insert into eCheck_Audit values(auditEntry.inspection.echeckSkuId, auditEntry.inspection.batch, auditEntry.entryDatetime, auditEntry.inspection.inspectionStatus.description, auditEntry.toJSON()))\n","security":[{"userToken":[]}],"produces":["application/json"],"consumes":["application/json"],"parameters":[{"in":"body","name":"auditEntry","description":"the inspection audit entry to save","required":true,"schema":{"$ref":"#/definitions/InspectionAuditEntry"}}],"responses":{"200":{"description":"successful operation"},"400":{"description":"the validation failed, client request is invalid","schema":{"$ref":"#/definitions/ErrorDetail"}},"401":{"description":"access token is not valid","schema":{"$ref":"#/definitions/ErrorDetail"}},"403":{"description":"user does not have admin or operator role","schema":{"$ref":"#/definitions/ErrorDetail"}},"404":{"description":"if existing audit is marked as deleted (ins_status=DELETED)","schema":{"$ref":"#/definitions/ErrorDetail"}}}}},"/inspectionAuditEntry/complete":{"x-swagger-router-controller":"AuditController","put":{"operationId":"markInspectionComplete","summary":"Mark inspection complete. Note the given auditEntry.inspection.inspectionStatus must be COMPLETED","description":"1. Get current equipments data which are related to given auditEntry.inspection.echeckSkuId from database (RequiredEquipmentDTO/AllowedEquipmentDTO/EquipmentTypeDTO, include deleted data)\n2. For each non-deleted item within given auditEntry's requiredEquipments/allowedEquipments/equipmentTypes, it must also exist as non-deleted in current equipments data and with all columns except createdAt/createdBy/updatedAt/updatedBy having same value\n3. If data not match, return the current equipments data with 409 error\n4. Otherwise data match, save auditEntry similar as saveInspectionAuditEntry\n","security":[{"userToken":[]}],"produces":["application/json"],"consumes":["application/json"],"parameters":[{"in":"body","name":"auditEntry","description":"the inspection audit entry to complete","required":true,"schema":{"$ref":"#/definitions/InspectionAuditEntry"}}],"responses":{"200":{"description":"successful operation"},"400":{"description":"the validation failed, client request is invalid","schema":{"$ref":"#/definitions/ErrorDetail"}},"401":{"description":"access token is not valid","schema":{"$ref":"#/definitions/ErrorDetail"}},"403":{"description":"user does not have admin or operator role","schema":{"$ref":"#/definitions/ErrorDetail"}},"404":{"description":"if existing audit is marked as deleted (ins_status=DELETED)","schema":{"$ref":"#/definitions/ErrorDetail"}},"409":{"description":"the current master equipments data do not match the given auditEntry's equipments data","schema":{"type":"object","required":["requiredEquipments","allowedEquipments","equipmentTypes"],"properties":{"requiredEquipments":{"type":"array","items":{"$ref":"#/definitions/RequiredEquipmentDTO"}},"allowedEquipments":{"type":"array","items":{"$ref":"#/definitions/AllowedEquipmentDTO"}},"equipmentTypes":{"type":"array","items":{"$ref":"#/definitions/EquipmentTypeDTO"}}}}}}}},"/inspectionAuditEntry/skus/{skuId}":{"x-swagger-router-controller":"AuditController","get":{"operationId":"getInspectionAuditEntries","summary":"Get array of inspection audit entris for given sku","description":"select audit_entry from eCheck_Audit where echeck_sku_id={skuId}","security":[{"userToken":[]}],"produces":["application/json"],"parameters":[{"in":"path","name":"skuId","description":"the SKU id","required":true,"type":"number","format":"long"}],"responses":{"200":{"description":"successful operation","schema":{"type":"array","items":{"$ref":"#/definitions/InspectionAuditEntry"}}},"400":{"description":"the validation failed, client request is invalid","schema":{"$ref":"#/definitions/ErrorDetail"}},"401":{"description":"access token is not valid","schema":{"$ref":"#/definitions/ErrorDetail"}},"403":{"description":"user does not have admin or operator role","schema":{"$ref":"#/definitions/ErrorDetail"}},"404":{"description":"the SKU id does not exist","schema":{"$ref":"#/definitions/ErrorDetail"}}}}},"/inspectionAuditEntry/skus/{skuId}/batches/{batch}":{"x-swagger-router-controller":"AuditController","get":{"operationId":"getInspectionAuditEntry","summary":"Get inspection audit entry for given sku and batch","description":"select audit_entry from eCheck_Audit where echeck_sku_id={skuId} and batch={batch}","security":[{"userToken":[]}],"produces":["application/json"],"parameters":[{"in":"path","name":"skuId","description":"the SKU id","required":true,"type":"number","format":"long"},{"in":"path","name":"batch","description":"the batch number","required":true,"type":"number","format":"long"}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/InspectionAuditEntry"}},"400":{"description":"the validation failed, client request is invalid","schema":{"$ref":"#/definitions/ErrorDetail"}},"401":{"description":"access token is not valid","schema":{"$ref":"#/definitions/ErrorDetail"}},"403":{"description":"user does not have admin or operator role","schema":{"$ref":"#/definitions/ErrorDetail"}},"404":{"description":"the SKU id does not exist, or audit entry does not exist","schema":{"$ref":"#/definitions/ErrorDetail"}}}}},"/inspectionAuditEntry/skus/{skuId}/batches/{batch}/status":{"x-swagger-router-controller":"AuditController","get":{"operationId":"getInspectionAuditEntryStatus","summary":"Get inspection audit entry status for given sku and batch","description":"select ins_status from eCheck_Audit where echeck_sku_id={skuId} and batch={batch}","security":[{"userToken":[]}],"produces":["application/json"],"parameters":[{"in":"path","name":"skuId","description":"the SKU id","required":true,"type":"number","format":"long"},{"in":"path","name":"batch","description":"the batch number","required":true,"type":"number","format":"long"}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/InspectionStatusDTO"}},"400":{"description":"the validation failed, client request is invalid","schema":{"$ref":"#/definitions/ErrorDetail"}},"401":{"description":"access token is not valid","schema":{"$ref":"#/definitions/ErrorDetail"}},"403":{"description":"user does not have admin or operator role","schema":{"$ref":"#/definitions/ErrorDetail"}},"404":{"description":"the SKU id does not exist, or audit entry does not exist","schema":{"$ref":"#/definitions/ErrorDetail"}}}}}},"definitions":{"ErrorDetail":{"type":"object","required":["message","code"],"properties":{"code":{"type":"string","description":"the error code for future reference"},"message":{"type":"string","description":"the detailed description/cause of the error"}}},"AuthRequest":{"type":"object","required":["username","password"],"properties":{"username":{"type":"string","description":"the user name, must be unique in application"},"password":{"type":"string","description":"the user password"}}},"User":{"type":"object","required":["id","username","password","role"],"properties":{"id":{"type":"number","format":"long","description":"the user id"},"username":{"type":"string","description":"the user name"},"password":{"type":"string","description":"the user password"},"role":{"type":"string","description":"the user role","enum":["ROLE_ADMIN","ROLE_OPERATOR"]}}},"LoginResponse":{"type":"object","required":["user","accessToken","refreshToken"],"properties":{"user":{"$ref":"#/definitions/User"},"accessToken":{"type":"string","description":"the access token that can be used in X-ADMIN-TOKEN or X-OPERATOR-TOKEN header"},"refreshToken":{"type":"string","description":"the refresh token that can be used in X-REFRESH-TOKEN header to obtain a new access token in case of remember me"}}},"SearchResult":{"type":"object","required":["pageNumber","pageSize","sortColumn","sortOrder","totalCount"],"properties":{"criteria":{"type":"string","description":"the criteria to search (wildcard match). If null then no criteria filter applied"},"pageNumber":{"type":"integer","format":"int32","description":"the page 0 based indexing. Must be >=0 if present. Assume 0 by default if null"},"pageSize":{"type":"integer","format":"int32","description":"the maximum number of results to return. Must be >0 if present. Assume Integer.MAX by default if null"},"sortColumn":{"type":"string","description":"the sort by column, if implementations doesn't support sorting by the provided column, implementations must return 400 with proper error message and error code"},"sortOrder":{"type":"string","description":"the sort order. Must be ASC or DESC if present. Assume ASC by default if null","enum":["ASC","DESC"]},"totalCount":{"type":"number","format":"long","description":"the total count"}}},"Configuration":{"type":"object","required":["equipmentDescription","barCodes"],"properties":{"processDescription":{"type":"string","description":"the process description"},"skuNum":{"type":"string","description":"the sku serial number"},"skuDescription":{"type":"string","description":"the sku description"},"equipmentDescription":{"type":"string","description":"the equipment description"},"barCodes":{"type":"string","description":"the comma delimited bar codes"}}},"ConfigurationSearchResult":{"type":"object","allOf":[{"$ref":"#/definitions/SearchResult"},{"type":"object","required":["records"],"properties":{"records":{"type":"array","items":{"$ref":"#/definitions/Configuration"}}}}]},"AuditAttributes":{"type":"object","properties":{"createdBy":{"type":"string","description":"the created by user"},"createdAt":{"type":"string","format":"date-time","description":"the created time"},"updatedBy":{"type":"string","description":"the updated by user"},"updatedAt":{"type":"string","format":"date-time","description":"the updated time"}}},"Process":{"type":"object","allOf":[{"$ref":"#/definitions/AuditAttributes"},{"type":"object","required":["id","description"],"properties":{"id":{"type":"number","format":"long","description":"the process id"},"description":{"type":"string","description":"the process description"}}}]},"ProcessSearchResult":{"type":"object","allOf":[{"$ref":"#/definitions/SearchResult"},{"type":"object","required":["records"],"properties":{"records":{"type":"array","items":{"$ref":"#/definitions/Process"}}}}]},"SKU":{"type":"object","allOf":[{"$ref":"#/definitions/AuditAttributes"},{"type":"object","required":["id","process","skuNum","description"],"properties":{"id":{"type":"number","format":"long","description":"the SKU id"},"process":{"$ref":"#/definitions/Process"},"skuNum":{"type":"string","description":"the SKU serial number"},"description":{"type":"string","description":"the SKU description"}}}]},"SKUSearchResult":{"type":"object","allOf":[{"$ref":"#/definitions/SearchResult"},{"type":"object","required":["records"],"properties":{"records":{"type":"array","items":{"$ref":"#/definitions/SKU"}}}}]},"EquipmentType":{"type":"object","allOf":[{"$ref":"#/definitions/AuditAttributes"},{"type":"object","required":["id","description"],"properties":{"id":{"type":"number","format":"long","description":"the equipment type id"},"description":{"type":"string","description":"the equipment type description"}}}]},"EquipmentTypeSearchResult":{"type":"object","allOf":[{"$ref":"#/definitions/SearchResult"},{"type":"object","required":["records"],"properties":{"records":{"type":"array","items":{"$ref":"#/definitions/EquipmentType"}}}}]},"RequiredEquipment":{"type":"object","allOf":[{"$ref":"#/definitions/AuditAttributes"},{"type":"object","required":["id","sku","equipmentType"],"properties":{"id":{"type":"number","format":"long","description":"the required equipment id"},"sku":{"$ref":"#/definitions/SKU"},"equipmentType":{"$ref":"#/definitions/EquipmentType"}}}]},"AllowedEquipment":{"type":"object","allOf":[{"$ref":"#/definitions/AuditAttributes"},{"type":"object","required":["id","sku","equipmentType","barCode","deleted"],"properties":{"id":{"type":"number","format":"long","description":"the allowed equipment id"},"sku":{"$ref":"#/definitions/SKU"},"equipmentType":{"$ref":"#/definitions/EquipmentType"},"barCode":{"type":"string","description":"the bar code"},"deleted":{"type":"boolean","description":"flag indicates whether this entity is marked as deleted"}}}]},"AllowedEquipmentSearchResult":{"type":"object","allOf":[{"$ref":"#/definitions/SearchResult"},{"type":"object","required":["records"],"properties":{"records":{"type":"array","items":{"$ref":"#/definitions/AllowedEquipment"}}}}]},"ProcessDTO":{"type":"object","allOf":[{"$ref":"#/definitions/Process"}]},"EquipmentTypeDTO":{"type":"object","allOf":[{"$ref":"#/definitions/EquipmentType"}]},"SkuDTO":{"type":"object","allOf":[{"$ref":"#/definitions/AuditAttributes"},{"type":"object","required":["id","processId","skuNum","description"],"properties":{"id":{"type":"number","format":"long","description":"the SKU id"},"processId":{"type":"number","format":"long","description":"the related process id"},"skuNum":{"type":"string","description":"the SKU serial number"},"description":{"type":"string","description":"the SKU description"}}}]},"RequiredEquipmentDTO":{"type":"object","allOf":[{"$ref":"#/definitions/AuditAttributes"},{"type":"object","required":["id","echeckSkuId","equipmentTypeId"],"properties":{"id":{"type":"number","format":"long","description":"the required equipment id"},"echeckSkuId":{"type":"number","format":"long","description":"the related sku id"},"equipmentTypeId":{"type":"number","format":"long","description":"the related equipment type id"}}}]},"AllowedEquipmentDTO":{"type":"object","allOf":[{"$ref":"#/definitions/AuditAttributes"},{"type":"object","required":["id","echeckSkuId","equipmentTypeId","barCode","deleted"],"properties":{"id":{"type":"number","format":"long","description":"the allowed equipment id"},"echeckSkuId":{"type":"number","format":"long","description":"the related sku id"},"equipmentTypeId":{"type":"number","format":"long","description":"the related equipment type id"},"barCode":{"type":"string","description":"the bar code"},"deleted":{"type":"boolean","description":"flag indicates whether this entity is marked as deleted"}}}]},"InspectionStatusDTO":{"type":"object","required":["id","description"],"properties":{"id":{"type":"number","format":"long","description":"the inspection status id"},"description":{"type":"string","description":"the inspection status description"}}},"EquipmentStatusDTO":{"type":"object","required":["id","description"],"properties":{"id":{"type":"number","format":"long","description":"the equipment status id"},"description":{"type":"string","description":"the equipment status description"}}},"InspectionDTO":{"type":"object","required":["id","echeckSkuId","batch","inspectionStatus","comment","completionDate"],"properties":{"id":{"type":"number","format":"long","description":"the inspection id"},"echeckSkuId":{"type":"number","format":"long","description":"the SKU id"},"batch":{"type":"number","format":"long","description":"the batch number"},"inspectionStatus":{"$ref":"#/definitions/InspectionStatusDTO"},"comment":{"type":"string","description":"the comment"},"completionDate":{"type":"string","format":"date-time","description":"the completion date"}}},"VerificationDTO":{"type":"object","required":["id","inspectionId","requiredEquipmentId","allowedEquipmentId","equipmentStatus","scannedTime"],"properties":{"id":{"type":"number","format":"long","description":"the verification id"},"inspectionId":{"type":"number","format":"long","description":"the inspection id"},"requiredEquipmentId":{"type":"number","format":"long","description":"the required equipment id"},"allowedEquipmentId":{"type":"number","format":"long","description":"the allowed equipment id"},"equipmentStatus":{"$ref":"#/definitions/EquipmentStatusDTO"},"scannedTime":{"type":"string","format":"date-time","description":"the scanned time"}}},"MasterData":{"type":"object","required":["processes","skus","equipmentTypes","requiredEquipments","alowedEquipments"],"properties":{"processes":{"type":"array","items":{"$ref":"#/definitions/ProcessDTO"},"description":"the list of processes"},"skus":{"type":"array","items":{"$ref":"#/definitions/SkuDTO"},"description":"the list of SKUs"},"equipmentTypes":{"type":"array","items":{"$ref":"#/definitions/EquipmentTypeDTO"},"description":"the list of equipment types"},"requiredEquipments":{"type":"array","items":{"$ref":"#/definitions/RequiredEquipmentDTO"},"description":"the list of required equipments"},"alowedEquipments":{"type":"array","items":{"$ref":"#/definitions/AllowedEquipmentDTO"},"description":"the list of allowed equipments"}}},"InspectionAuditEntry":{"type":"object","required":["id","sku","entryDatetime","inspection","verifications","requiredEquipments","alowedEquipments","equipmentTypes"],"properties":{"id":{"type":"number","format":"long","description":"the audit id"},"sku":{"$ref":"#/definitions/SKU"},"entryDatetime":{"type":"string","format":"date-time","description":"the inspection date"},"inspection":{"$ref":"#/definitions/InspectionDTO"},"verifications":{"type":"array","items":{"$ref":"#/definitions/VerificationDTO"},"description":"the list of verification records"},"requiredEquipments":{"type":"array","items":{"$ref":"#/definitions/RequiredEquipmentDTO"},"description":"the list of required equipments at the time of this inspection audit entry"},"alowedEquipments":{"type":"array","items":{"$ref":"#/definitions/AllowedEquipmentDTO"},"description":"the list of allowed equipments at the time of this inspection audit entry"},"equipmentTypes":{"type":"array","items":{"$ref":"#/definitions/EquipmentTypeDTO"},"description":"the list of equipment types at the time of this inspection audit entry"}}},"InspectionAudit":{"type":"object","allOf":[{"$ref":"#/definitions/AuditAttributes"},{"type":"object","required":["id","sku","batch","entryDatetime","insStatus","auditEntry"],"properties":{"id":{"type":"number","format":"long","description":"the audit id"},"sku":{"$ref":"#/definitions/SKU"},"batch":{"type":"number","format":"long","description":"the batch number"},"entryDatetime":{"type":"string","format":"date-time","description":"the inspection entry date"},"insStatus":{"type":"string","description":"the inspection status"},"auditEntry":{"$ref":"#/definitions/InspectionAuditEntry"}}}]},"InspectionAuditSearchResult":{"type":"object","allOf":[{"$ref":"#/definitions/SearchResult"},{"type":"object","required":["records"],"properties":{"records":{"type":"array","items":{"$ref":"#/definitions/InspectionAudit"},"description":"the list of search result records"}}}]}},"securityDefinitions":{"refreshToken":{"description":"refresh token in X-REFRESH-TOKEN header","type":"apiKey","name":"X-REFRESH-TOKEN","in":"header"},"userToken":{"description":"user's access token in Authorization header with format: Bearer TOKEN","type":"apiKey","name":"Authorization","in":"header"}}}</con:content>
      <con:type>https://swagger.io/swagger2/specification</con:type>
    </con:part>
  </con:definitionCache>
  <con:endpoints>
    <con:endpoint>https://localhost:8080</con:endpoint>
  </con:endpoints>
</con:interface>
